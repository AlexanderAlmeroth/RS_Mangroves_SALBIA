//---------------------------------------------------------------------------------------------------------------------------------------------------------------
// L7 1999
// RANDOM FOREST 
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBand, null, true);
}
var visualization = {
  bands: ['SR_B3', 'SR_B2', 'SR_B1'],
  min: 0.0,
  max: 0.3,
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
var L7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
  .filterBounds(MaskGambia)
  .filterDate('1999-11-01', '1999-12-31')
  .map(applyScaleFactors);

var selectLeastCloudy7 = function(scene) {
  var sceneImages = L7.filter(ee.Filter.eq('WRS_PATH', scene.get('WRS_PATH')))
                                     .filter(ee.Filter.eq('WRS_ROW', scene.get('WRS_ROW')));
  var leastCloudy = sceneImages.sort('CLOUD_COVER').first();
  return leastCloudy;
};
var scenes7 = L7.distinct(['WRS_PATH', 'WRS_ROW']);
var leastCloudyPerScene7 = scenes7.map(selectLeastCloudy7);
//print ('leastCloudyPerScene 7 1999', leastCloudyPerScene7);

var leastCloudyCollection7 = ee.ImageCollection(leastCloudyPerScene7);
var medianComposite7 = leastCloudyCollection7.median();
Map.addLayer(medianComposite7.clip(MaskGambia), visualization, 'L7 1999 Median Selected');
//-------------------------------------------------------------------------------------------
//NDVI 
var ndvi = medianComposite7.normalizedDifference(['SR_B4', 'SR_B3']).rename('NDVI');
var medianCompositeNDVI = medianComposite7.addBands(ndvi);
Map.addLayer(medianCompositeNDVI.clip(MaskGambia), {bands: ['NDVI'], min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'Image with NDVI');
//print('Median Compsite + NDVI 1999',medianCompositeNDVI);
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// RANDOM FOREST POLYGON APPROACH
var polygons1 = ee.FeatureCollection(WaterPoly);
var randomPoints1 = ee.FeatureCollection.randomPoints(polygons1, 750);
var Waterpoints = randomPoints1.map(function(point) {
  var polygon = polygons1.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(0)); 
});

var polygons2 = ee.FeatureCollection(DrylandPoly);
var randomPoints2 = ee.FeatureCollection.randomPoints(polygons2, 750);
var Drylandpoints = randomPoints2.map(function(point) {
  var polygon = polygons2.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(1)); 
});

var polygons3 = ee.FeatureCollection(MudflatPoly);
var randomPoints3 = ee.FeatureCollection.randomPoints(polygons3, 750);
var Mudflatpoints = randomPoints3.map(function(point) {
  var polygon = polygons3.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(2)); 
});

var polygons4 = ee.FeatureCollection(MangrovePoly);
var randomPoints4 = ee.FeatureCollection.randomPoints(polygons4, 750);
var Mangrovepoints = randomPoints4.map(function(point) {
  var polygon = polygons4.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(3)); 
});

var polygons5 = ee.FeatureCollection(WoodlandPoly);
var randomPoints5 = ee.FeatureCollection.randomPoints(polygons5, 750);
var Woodlandpoints = randomPoints5.map(function(point) {
  var polygon = polygons5.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(4)); 
});

//-------------------------------------------------------------------------------------------//-------------------------------------------------------------------------------------------
// FIX BROKEN COLLECTIONS (Multiple Geometry types) // 
//var polygons = Dryland.map(function (f) {return ee.Feature(f).set('geometry_type', ee.Feature(f).geometry().type()); }).filter(ee.Filter.equals('geometry_type', 'Polygon'));
//var polygonsnew = ee.FeatureCollection(polygons); print(polygonsnew);
//Map.addLayer(Dryland, {color: 'green'},'old'); Map.addLayer(polygonsnew, {color: 'black'},'new');

// Convert the feature collections to a geometry object.
        //var fcWood = WoodlandPoly.geometry();
// Get the drawing tools.
        //var drawingTools = Map.drawingTools();
// Transfer the feature collection geometry to the client.
    //fcWood.evaluate(function(geomList) {
// Add the geometry as a layer of the drawing tools.
 //drawingTools.addLayer([geomList], 'fcWood', 'lime');
   //});
//-------------------------------------------------------------------------------------
var trainingPoly =  Waterpoints.merge(Drylandpoints).merge(Mudflatpoints).merge(Mangrovepoints).merge(Woodlandpoints);
print(trainingPoly, 'Training set Polygons');

var label = 'Class';
var bands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7','NDVI'];
var input = medianCompositeNDVI.select(bands);

var trainImagePoly = input.sampleRegions({
  collection: trainingPoly,
  properties: [label],
  scale: 30
});
var trainingDataPoly = trainImagePoly.randomColumn();
var trainSetPoly = trainingDataPoly.filter(ee.Filter.lessThan('random', 0.8));print('trainSetPoly',trainSetPoly);
var testSetPoly = trainingDataPoly.filter(ee.Filter.greaterThanOrEquals('random',0.8));print('testSetPoly',testSetPoly);

// Classification Model
var classifierPoly = ee.Classifier.smileRandomForest(100)
                  .train({
                    features: trainSetPoly,
                    classProperty: label,
                    inputProperties: bands
                  });
print('Results of trained classifier', classifierPoly.explain());
//Classify the image
var classifiedPoly = input.classify(classifierPoly);

//Define a palette for the classification
var landcoverPalette = ['blue','yellow','brown','green','lime'];
Map.addLayer(classifiedPoly.clip(MaskGambia), {palette: landcoverPalette, min:0, max:4}, 'Classification Polygons');
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//Accuracy Assessment  
//TRAINING DATASET//
  var train_accuracy = classifierPoly.confusionMatrix();print('Confusion Matrix', train_accuracy);
  var OA_training = train_accuracy.accuracy(); print('OA_training',OA_training);
  var Kappa_training = train_accuracy.kappa(); print('Kappa_training',Kappa_training);
  var PA_training = train_accuracy.producersAccuracy(); print('PA_training',PA_training);
  var CA_training = train_accuracy.consumersAccuracy(); print('CA_training',CA_training);

//VALIDATION DATASET// 
  var validated = testSetPoly.classify(classifierPoly);
  var test_accuracy = validated.errorMatrix('Class', 'classification'); print('Error Matrix',test_accuracy);
  var OA_validation = test_accuracy.accuracy();           print('OA_validation',OA_validation);
  var Kappa_validation = test_accuracy.kappa();           print('Kappa_validation',Kappa_validation);
  var PA_validation = test_accuracy.producersAccuracy();  print('PA_validation',PA_validation);
  var CA_validation = test_accuracy.consumersAccuracy();  print('CA_validation',CA_validation);

//-------------------------------------------------------------------------------------------
var importance = ee.Dictionary(
  classifierPoly.explain().get('importance')
)
var totalImportance = importance.values().reduce(ee.Reducer.sum())
var importancePercentage = importance.map(function (band, importance) {
  return ee.Number(importance).divide(totalImportance).multiply(100)
})

print('importance', importance)
print('totalImportance', totalImportance)
print('importancePercentage', importancePercentage)

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// EXPORT
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                     
//  ---------------------  Exporting Training/Validation Sites  ---------------------  // 
// As Asset // 
var featuresWat = ee.FeatureCollection(WaterPoly);
Export.table.toAsset({
  collection: featuresWat,
  description:'1999WaterPoly',
  assetId: '1999WaterPoly',
});

var featuresDry = ee.FeatureCollection(DrylandPoly);
Export.table.toAsset({
  collection: featuresDry,
  description:'1999DrylandPoly',
  assetId: '1999DrylandPoly',
});

var featuresMud = ee.FeatureCollection(MudflatPoly);
Export.table.toAsset({
  collection: featuresMud,
  description:'1999MudflatPoly',
  assetId: '1999MudflatPoly',
});

var featuresMan = ee.FeatureCollection(MangrovePoly);
Export.table.toAsset({
  collection: featuresMan,
  description:'1999MangrovePoly',
  assetId: '1999MangrovePoly',
});

// As Shape // 
var fcMerged = MudflatPoly.merge(MangrovePoly).merge(DrylandPoly).merge(WaterPoly);
Export.table.toDrive({
  collection: testSetPoly,
  description:'testSetPoly1999',
});

Export.table.toDrive({
  collection: trainSetPoly,
  description:'trainSetPoly1999',
});

Export.table.toDrive({
  collection: MudflatPoly,
  description:'1999MudflatPoly',
});

Export.table.toDrive({
  collection: WaterPoly,
  description:'1999WaterPoly',
});

Export.table.toDrive({
  collection: MangrovePoly,
  description:'1999MangrovePoly',
});

Export.table.toDrive({
  collection: WoodlandPoly,
  description:'1999WoodlandPoly',
});

Export.table.toDrive({
  collection: DrylandPoly,
  description:'1999DrylandPoly',
});


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// -------------------- EXPORT ---------------------              -> The file size of the TIFS is too large to be exported as one, that's why we cut them in half here and export them as "Cropped_1" and "Cropped_2". Afterwards they can be merged in another software
// CONVERT THE Crop-Boxes  
var Crop1 = Crop1.geometry(); 
var Crop2 = Crop2.geometry(); 

//EXPORT CLASSIFIED IMAGE 
var classified_1999_Cropped_1 = classifiedPoly.clip(Crop1).clip(MaskGambia);
var classified_1999_Cropped_2 = classifiedPoly.clip(Crop2).clip(MaskGambia);
  
Export.image.toDrive({
    image: classified_1999_Cropped_1,
    description: 'classified_1999_Cropped_1',
    folder: 'GEE_Export',
    fileNamePrefix: 'classified_1999_Cropped_1',
    scale: 30,
    maxPixels: 1e13,
    region: Crop1,
    }); 
Export.image.toDrive({
    image: classified_1999_Cropped_2,
    description: 'classified_1999_Cropped_2',
    folder: 'GEE_Export',
    fileNamePrefix: 'classified_1999_Cropped_2',
    scale: 30,
    maxPixels: 1e13,
    region: Crop2,
    });     

    
    
//EXPORT COMPOSITE IMAGE
var Composite_1999_Cropped_1 = medianCompositeNDVI.clip(Crop1).clip(MaskGambia);
var Composite_1999_Cropped_2 = medianCompositeNDVI.clip(Crop2).clip(MaskGambia);

Export.image.toDrive({
    image: Composite_1999_Cropped_1.visualize(visualization),
    description: 'Composite_1999_Cropped_1',
    folder: 'GEE_Export',
    fileNamePrefix: 'Composite_1999_Cropped_1',
    scale: 30,
    maxPixels: 1e13,
    region: Crop1,
    }); 
    
    
Export.image.toDrive({
    image: Composite_1999_Cropped_2.visualize(visualization),
    description: 'Composite_1999_Cropped_2',
    folder: 'GEE_Export',
    fileNamePrefix: 'Composite_1999_Cropped_2',
    scale: 30,
   maxPixels: 1e13,
   region: Crop2,
   }); 

