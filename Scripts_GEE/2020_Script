// REFINEMENT
//L8 2020
// REFINEMENT
function applyScaleFactorsL8(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}
var visualizationL8 = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0,
  max: 0.3,
};
//-------------------------------------------------------------------------------------------
var L8_2020 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterBounds(MaskGambia)
  .filterDate('2020-11-01', '2020-12-31')
  .map(applyScaleFactorsL8);


var selectLeastCloudy2020 = function(scene) {
  var sceneImages = L8_2020.filter(ee.Filter.eq('WRS_PATH', scene.get('WRS_PATH')))
                                     .filter(ee.Filter.eq('WRS_ROW', scene.get('WRS_ROW')));
  var leastCloudy = sceneImages.sort('CLOUD_COVER').first();
  return leastCloudy;
};
var scenes8 = L8_2020.distinct(['WRS_PATH', 'WRS_ROW']);
var leastCloudyPerScene2020 = scenes8.map(selectLeastCloudy2020);
//print ('leastCloudyPerScene 8 2020', leastCloudyPerScene2020);

var leastCloudyCollection2020 = ee.ImageCollection(leastCloudyPerScene2020);
var medianComposite2020 = leastCloudyCollection2020.median();
Map.addLayer(medianComposite2020.clip(MaskGambia), visualizationL8, 'L8 2020 Median Selected');

//-------------------------------------------------------------------------------------------
//NDVI 
var ndvi = medianComposite2020.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
var medianCompositeNDVI = medianComposite2020.addBands(ndvi);
Map.addLayer(medianCompositeNDVI.clip(MaskGambia), {bands: ['NDVI'], min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'Image with NDVI');
//print('Median Compsite + NDVI 2020',medianCompositeNDVI);
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// POLYGON APPROACH 
//-------------------------------------------------------------------------------------------//-------------------------------------------------------------------------------------------
var polygons1 = ee.FeatureCollection(WaterPoly);
var randomPoints1 = ee.FeatureCollection.randomPoints(polygons1, 750);
var Waterpoints = randomPoints1.map(function(point) {
  var polygon = polygons1.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(0)); 
});

var polygons2 = ee.FeatureCollection(DrylandPoly);
var randomPoints2 = ee.FeatureCollection.randomPoints(polygons2, 750);
var Drylandpoints = randomPoints2.map(function(point) {
  var polygon = polygons2.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(1)); 
});

var polygons3 = ee.FeatureCollection(MudflatPoly);
var randomPoints3 = ee.FeatureCollection.randomPoints(polygons3, 750);
var Mudflatpoints = randomPoints3.map(function(point) {
  var polygon = polygons3.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(2)); 
});

var polygons4 = ee.FeatureCollection(MangrovePoly);
var randomPoints4 = ee.FeatureCollection.randomPoints(polygons4, 750);
var Mangrovepoints = randomPoints4.map(function(point) {
  var polygon = polygons4.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(3)); 
});

var polygons5 = ee.FeatureCollection(WoodlandPoly);
var randomPoints5 = ee.FeatureCollection.randomPoints(polygons5, 750);
var Woodlandpoints = randomPoints5.map(function(point) {
  var polygon = polygons5.filterBounds(point.geometry()).first();
  var featureWithClass = point.set(polygon.toDictionary());
  return featureWithClass.set('Class', ee.Number(4)); 
});

//-------------------------------------------------------------------------------------
var trainingPoly =  Waterpoints.merge(Drylandpoints).merge(Mudflatpoints).merge(Mangrovepoints).merge(Woodlandpoints);

print(trainingPoly,'Training set Polygons');

var label = 'Class';
var bands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5','SR_B6', 'SR_B7','NDVI'];
var input = medianCompositeNDVI.select(bands);

var trainImagePoly = input.sampleRegions({
  collection: trainingPoly,
  properties: [label],
  scale: 30
});

var trainingDataPoly = trainImagePoly.randomColumn();
var trainSetPoly = trainingDataPoly.filter(ee.Filter.lessThan('random', 0.8));print('trainSetPoly',trainSetPoly);
var testSetPoly = trainingDataPoly.filter(ee.Filter.greaterThanOrEquals('random',0.8));print('testSetPoly',testSetPoly);

// Classification Model
var classifierPoly = ee.Classifier.smileRandomForest(100)
                  .train({
                    features: trainSetPoly,
                    classProperty: label,
                    inputProperties: bands
                  });
                  
                  
print('Results of trained classifier', classifierPoly.explain());  
//Classify the image
var classifiedPoly = input.classify(classifierPoly);

//Define a palette for the classification
var landcoverPalette = ['blue','yellow','brown','green','lime'];
Map.addLayer(classifiedPoly.clip(MaskGambia), {palette: landcoverPalette, min:0, max:4}, 'Classification Polygons');

//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//Accuracy Assessment  
// https://blog.gishub.org/earth-engine-tutorial-33-performing-accuracy-assessment-for-image-classification //
//TRAINING DATASET//
  var train_accuracy = classifierPoly.confusionMatrix();print('Confusion Matrix', train_accuracy);
  var OA_training = train_accuracy.accuracy(); print('OA_training',OA_training);
  var Kappa_training = train_accuracy.kappa(); print('Kappa_training',Kappa_training);
  var PA_training = train_accuracy.producersAccuracy(); print('PA_training',PA_training);
  var CA_training = train_accuracy.consumersAccuracy(); print('CA_training',CA_training);

//VALIDATION DATASET// 
  var validated = testSetPoly.classify(classifierPoly);
  var test_accuracy = validated.errorMatrix('Class', 'classification'); print('Error Matrix',test_accuracy);
  var OA_validation = test_accuracy.accuracy();           print('OA_validation',OA_validation);
  var Kappa_validation = test_accuracy.kappa();           print('Kappa_validation',Kappa_validation);
  var PA_validation = test_accuracy.producersAccuracy();  print('PA_validation',PA_validation);
  var CA_validation = test_accuracy.consumersAccuracy();  print('CA_validation',CA_validation);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                     
var importance = ee.Dictionary(
  classifierPoly.explain().get('importance')
)
var totalImportance = importance.values().reduce(ee.Reducer.sum())
var importancePercentage = importance.map(function (band, importance) {
  return ee.Number(importance).divide(totalImportance).multiply(100)
})

print('importance', importance)
print('totalImportance', totalImportance)
print('importancePercentage', importancePercentage)
//-------------------------------------------------------------------------------------------//-----------------------------------------------------------------------------------------

// Refinement of the classification
var mostConfusedClass = 2; // Example: Mudflat class is most misclassified
var impreciseMask = classifiedPoly.eq(mostConfusedClass);

var secondClass = 4;                                                    
var refinedTrainingData = trainingDataPoly.filter(ee.Filter.or(
    ee.Filter.eq('Class', mostConfusedClass),
    ee.Filter.eq('Class', secondClass)
));

var refinedTrainSet = refinedTrainingData.randomColumn().filter(ee.Filter.lessThan('random', 0.8));
var refinedTestSet = refinedTrainingData.randomColumn().filter(ee.Filter.greaterThanOrEquals('random', 0.8));

// Train a Secondary Classifier for the Confused Class
var refinedClassifier = ee.Classifier.smileRandomForest(100).train({features: refinedTrainSet, classProperty: 'Class', inputProperties: bands});

// Apply Refined Classification to the Imprecise Class
var refinedClassified = input.select(bands).classify(refinedClassifier);
var finalClassification = classifiedPoly.where(classifiedPoly.eq(mostConfusedClass), refinedClassified);
Map.addLayer(finalClassification.clip(MaskGambia), {palette: landcoverPalette, min: 0, max: 4}, 'Refined Classification');



//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                     
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                     
//  ---------------------  Exporting Training/Validation Sites  ---------------------  // 
// As Asset // 
//var featuresWat = ee.FeatureCollection(WaterPoly);
//Export.table.toAsset({
//  collection: featuresWat,
 // description:'2023WaterPoly',
 // assetId: '2023WaterPoly',
//});
//var featuresDry = ee.FeatureCollection(DrylandPoly);
//Export.table.toAsset({
//  collection: featuresDry,
 // description:'2023DrylandPoly',
//  assetId: '2023DrylandPoly',
//});
//var featuresMud = ee.FeatureCollection(MudflatPoly);
//Export.table.toAsset({
//  collection: featuresMud,
//  description:'2023MudflatPoly',
//  assetId: '2023MudflatPoly',
//});
//var featuresMan = ee.FeatureCollection(MangrovePoly);
//Export.table.toAsset({
//  collection: featuresMan,
//  description:'2023MangrovePoly',
//  assetId: '2023MangrovePoly',
//});

// As Shape // 
//var fcMerged = MudflatPoly.merge(MangrovePoly).merge(DrylandPoly).merge(WaterPoly);
//Export.table.toDrive({
//  collection: fcMerged,
//  description:'2023MergedPoly',
//});

//Export.table.toDrive({
//  collection: MudflatPoly,
//  description:'2020MudflatPoly',
//});
//Export.table.toDrive({
//  collection: DrylandPoly,
//  description:'2020DrylandPoly',
//});
//Export.table.toDrive({
//  collection: WaterPoly,
//  description:'2020WaterPoly',
//});
//Export.table.toDrive({
//  collection: MangrovePoly,
//  description:'2020MangrovePoly',
//});
//Export.table.toDrive({
//  collection: WoodlandPoly,
//  description:'2020WoodlandPoly',
//});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// -------------------- EXPORT ---------------------    
//EXPORT CLASSIFIED IMAGE                                                                       -> The file size of the TIFS is too large to be exported as one, that's why we cut them in half here and export them as "Cropped_1" and "Cropped_2". Afterwards they can be merged in another softwa
var classified_2020_Cropped_1 = classifiedPoly.clip(Crop1).clip(MaskGambia);
var classified_2020_Cropped_2 = classifiedPoly.clip(Crop2).clip(MaskGambia);

//Map.addLayer(classified_2020_Cropped_1, {palette: landcoverPalette, min:0, max:4},'Crop1');

Export.image.toDrive({
    image: classified_2020_Cropped_1,
    description: 'classified_2020_Cropped_1',
    folder: 'GEE_Export',
    fileNamePrefix: 'classified_2020_Cropped_1',
    scale: 30,
    maxPixels: 1e13,
    region:Crop1,
   }); 
Export.image.toDrive({
    image: classified_2020_Cropped_2,
    description: 'classified_2020_Cropped_2',
    folder: 'GEE_Export',
    fileNamePrefix: 'classified_2020_Cropped_2',
    scale: 30,
    maxPixels: 1e13,
    region:Crop2,
    });     

//EXPORT REFINED IMAGE    
var classified_2020_1_Improved = finalClassification.clip(Crop1).clip(MaskGambia);
var classified_2020_2_Improved = finalClassification.clip(Crop2).clip(MaskGambia);

Export.image.toDrive({
    image: classified_2020_1_Improved,
    description: 'classified_2020_1_Improved',
    folder: 'GEE_Export',
    fileNamePrefix: 'classified_2020_1_Improved',
    scale: 30,
    maxPixels: 1e13,
    region:Crop1,
    }); 
Export.image.toDrive({
    image: classified_2020_2_Improved,
    description: 'classified_2020_2_Improved',
    folder: 'GEE_Export',
    fileNamePrefix: 'classified_2020_2_Improved',
    scale: 30,
    maxPixels: 1e13,
    region:Crop2,
    });         


    
//EXPORT COMPOSITE IMAGE
var Composite_2020_Cropped_1 = medianCompositeNDVI.clip(Crop1).clip(MaskGambia);
var Composite_2020_Cropped_2 = medianCompositeNDVI.clip(Crop2).clip(MaskGambia);

Export.image.toDrive({
    image: Composite_2020_Cropped_1.visualize(visualizationL8),
    description: 'Composite_2020_Cropped_1',
   folder: 'GEE_Export',
    fileNamePrefix: 'Composite_2020_Cropped_1',
    scale: 30,
    maxPixels: 1e13,
    region:Crop1,
    }); 
    
    
Export.image.toDrive({
    image: Composite_2020_Cropped_2.visualize(visualizationL8),
    description: 'Composite_2020_Cropped_2',
    folder: 'GEE_Export',
   fileNamePrefix: 'Composite_2020_Cropped_2',
    scale: 30,
    maxPixels: 1e13,
    region:Crop2,
    }); 


//EXPORT NDVI 
Export.image.toDrive({
    image: Composite_2020_Cropped_1.select(['NDVI']),
    description: 'NDVI_2020_Cropped_1',
    folder: 'GEE_Export',
    fileNamePrefix: 'NDVI_2020_Cropped_1',
    scale: 30,
    maxPixels: 1e13,
    region: Crop1,
    }); 

Export.image.toDrive({
    image: Composite_2020_Cropped_2.select(['NDVI']),
    description: 'NDVI_2020_Cropped_2',
    folder: 'GEE_Export',
    fileNamePrefix: 'NDVI_2020_Cropped_2',
    scale: 30,
    maxPixels: 1e13,
    region: Crop2,
    }); 
    
